{
  "address": "0xD7745A832D16E4B18df714b1811AD6f90e91F13f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        }
      ],
      "name": "UpdateMetadataHash",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_EXTENSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRESALE_MINT_MAX_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRESALE_MINT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALE_MINT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "alreadyFreeMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURIHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURIHashUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStage",
      "outputs": [
        {
          "internalType": "enum DigitalHanamiNFT.Stage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "freeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFreeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newBaseURIHash",
          "type": "bytes32"
        }
      ],
      "name": "setBaseURIHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rootHash",
          "type": "bytes32"
        }
      ],
      "name": "setFreeMintMerkleRootHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pendingFreeMint",
          "type": "uint256"
        }
      ],
      "name": "setPendingFreeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rootHash",
          "type": "bytes32"
        }
      ],
      "name": "setPresaleMerkleRootHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFreemint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3340497de8aa1322742a5ded4021cabc96877a0834271064213848adbeca2ea0",
  "receipt": {
    "to": null,
    "from": "0x4CBc4022fD346ea8B1Eff9E11E9F0D76767B5fb2",
    "contractAddress": "0xD7745A832D16E4B18df714b1811AD6f90e91F13f",
    "transactionIndex": 22,
    "gasUsed": "2586156",
    "logsBloom": "0x
    "blockHash": "0x69ed7ce5b72601a822df2dba1bc870beb249ea80409f444ba7dcb552203b91df",
    "transactionHash": "0x3340497de8aa1322742a5ded4021cabc96877a0834271064213848adbeca2ea0",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 10497273,
        "transactionHash": "0x3340497de8aa1322742a5ded4021cabc96877a0834271064213848adbeca2ea0",
        "address": "0xD7745A832D16E4B18df714b1811AD6f90e91F13f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cbc4022fd346ea8b1eff9e11e9f0d76767b5fb2"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x69ed7ce5b72601a822df2dba1bc870beb249ea80409f444ba7dcb552203b91df"
      }
    ],
    "blockNumber": 10497273,
    "cumulativeGasUsed": "4470120",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Digital Hanami",
    "TDHNM",
    "0xEfe74313460403942Fd37e1D572692299a0c1B5E"
  ],
  "numDeployments": 2,
  "solcInputHash": "857b84ff5fa345e9068643fddb145db8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"UpdateMetadataHash\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_EXTENSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_MINT_MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"alreadyFreeMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURIHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURIHashUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"enum DigitalHanamiNFT.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"freeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFreeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newBaseURIHash\",\"type\":\"bytes32\"}],\"name\":\"setBaseURIHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"setFreeMintMerkleRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingFreeMint\",\"type\":\"uint256\"}],\"name\":\"setPendingFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"setPresaleMerkleRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFreemint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DigitalHanamiNFT.sol\":\"DigitalHanamiNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DigitalHanamiNFT.sol\":{\"content\":\"// contracts/DigitalHanamiNFT.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract DigitalHanamiNFT is ERC721A, Ownable {\\n    using Strings for uint256;\\n\\n    enum Stage {\\n        Closed,\\n        Freemint,\\n        Presale,\\n        Sale\\n    }\\n\\n    string private baseURI;\\n    string private notRevealedUri;\\n    string public constant BASE_EXTENSION = \\\".json\\\";\\n    bytes32 public baseURIHash;\\n    uint256 public baseURIHashUpdateTime;\\n\\n    Stage public currentStage;\\n    uint256 public constant PRESALE_MINT_MAX_AMOUNT = 2;\\n    uint256 public constant PRESALE_MINT_PRICE = 0.08 ether;\\n    uint256 public constant SALE_MINT_PRICE = 0.1 ether;\\n    uint256 public constant TOTAL_SUPPLY = 10000;\\n\\n    bool public revealed = false;\\n\\n    bytes32 private presaleMerkleRootHash;\\n    bytes32 private freeMintMerkleRootHash;\\n    uint256 public pendingFreeMint = 0;\\n    address private treasuryWallet;\\n    mapping(bytes32 => bool) public alreadyFreeMinted;\\n\\n    event UpdateMetadataHash(bytes32 newHash);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _treasuryWallet\\n    ) ERC721A(string(_name), string(_symbol)) {\\n        setTreasuryWallet(_treasuryWallet);\\n    }\\n\\n    function setTreasuryWallet(address _newTreasuryWallet) public onlyOwner {\\n        require(_newTreasuryWallet != address(0), \\\"zero address not allowed\\\");\\n        treasuryWallet = _newTreasuryWallet;\\n    }\\n\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        require(keccak256(abi.encode(_newBaseURI)) == baseURIHash, \\\"invalid hash\\\");\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function setBaseURIHash(bytes32 _newBaseURIHash) public onlyOwner {\\n        baseURIHash = _newBaseURIHash;\\n        // solhint-disable-next-line not-rely-on-time\\n        baseURIHashUpdateTime = block.timestamp;\\n        emit UpdateMetadataHash(_newBaseURIHash);\\n    }\\n\\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\n        notRevealedUri = _notRevealedURI;\\n    }\\n\\n    function startFreemint() external onlyOwner {\\n        currentStage = Stage.Freemint;\\n    }\\n\\n    function startPresale() external onlyOwner {\\n        currentStage = Stage.Presale;\\n    }\\n\\n    function startPublicSale() external onlyOwner {\\n        currentStage = Stage.Sale;\\n    }\\n\\n    function closeSale() external onlyOwner {\\n        currentStage = Stage.Closed;\\n    }\\n\\n    function setPendingFreeMint(uint256 _pendingFreeMint) external onlyOwner {\\n        pendingFreeMint = _pendingFreeMint;\\n    }\\n\\n    function setPresaleMerkleRootHash(bytes32 _rootHash) external onlyOwner {\\n        presaleMerkleRootHash = _rootHash;\\n    }\\n\\n    function setFreeMintMerkleRootHash(bytes32 _rootHash) external onlyOwner {\\n        freeMintMerkleRootHash = _rootHash;\\n    }\\n\\n    function reveal(bool _state, string memory _newBaseURI) external onlyOwner {\\n        revealed = _state;\\n        setBaseURI(_newBaseURI);\\n    }\\n\\n    function mint(uint256 _mintAmount, bytes32[] calldata _merkleProof) external payable {\\n        require(currentStage == Stage.Presale || currentStage == Stage.Sale, \\\"not open yet\\\");\\n        require(_mintAmount > 0, \\\"amount to mint invalid\\\");\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(tx.origin == msg.sender, \\\"contracts not allowed\\\");\\n\\n        if (currentStage == Stage.Presale) {\\n            uint256 newMintsPerAddress = _numberMinted(msg.sender) + _mintAmount;\\n            require(newMintsPerAddress <= PRESALE_MINT_MAX_AMOUNT, \\\"cannot mint amount requested\\\");\\n\\n            require(PRESALE_MINT_PRICE * _mintAmount <= msg.value, \\\"insufficient funds\\\");\\n\\n            bytes32 leafHash = keccak256(abi.encodePacked(msg.sender));\\n            require(MerkleProof.verify(_merkleProof, presaleMerkleRootHash, leafHash), \\\"wallet not in presale list\\\");\\n        } else {\\n            require(SALE_MINT_PRICE * _mintAmount <= msg.value, \\\"insufficient funds\\\");\\n        }\\n\\n        require(currentIndex + pendingFreeMint + _mintAmount <= TOTAL_SUPPLY, \\\"collection sold out\\\");\\n\\n        _mint(msg.sender, _mintAmount, \\\"\\\", false);\\n    }\\n\\n    function freeMint(bytes32[] calldata _merkleProof) external {\\n        require(currentStage != Stage.Closed, \\\"not open yet\\\");\\n\\n        bytes32 leafHash = keccak256(abi.encodePacked(msg.sender));\\n        require(MerkleProof.verify(_merkleProof, freeMintMerkleRootHash, leafHash), \\\"wallet not in free mint list\\\");\\n\\n        require(!alreadyFreeMinted[leafHash], \\\"already free minted\\\");\\n        alreadyFreeMinted[leafHash] = true;\\n        pendingFreeMint -= 1;\\n\\n        // Here we check only `<` instead of `<=` because not adding qty (1) to currentIndex\\n        require(currentIndex + pendingFreeMint < TOTAL_SUPPLY, \\\"collection sold out\\\");\\n\\n        _mint(msg.sender, 1, \\\"\\\", false);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        // solhint-disable-next-line reason-string\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        if (revealed == false) {\\n            return notRevealedUri;\\n        }\\n\\n        string memory currentBaseURI = baseURI;\\n        return\\n            bytes(currentBaseURI).length > 0\\n                ? string(abi.encode(currentBaseURI, tokenId.toString(), BASE_EXTENSION))\\n                : \\\"\\\";\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        // solhint-disable-next-line reason-string\\n        require(payable(treasuryWallet).send(balance));\\n    }\\n}\\n\",\"keccak256\":\"0x18559cc1adff45627e779438835cd67cfc53da7e7dbbbe85e76b2b2417b2c164\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Does not support burning tokens to address(0).\\n *\\n * Assumes that an owner cannot have more than the 2**128 - 1 (max value of uint128) of supply\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n    }\\n\\n    struct AddressData {\\n        uint128 balance;\\n        uint128 numberMinted;\\n    }\\n\\n    uint256 internal currentIndex;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return currentIndex;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n        return index;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n        uint256 numMintedSoFar = totalSupply();\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        require(owner != address(0), \\\"ERC721A: number minted query for the zero address\\\");\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n        unchecked {\\n            for (uint256 curr = tokenId; curr >= 0; curr--) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (ownership.addr != address(0)) {\\n                    return ownership;\\n                }\\n            }\\n        }\\n\\n        revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < currentIndex;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = currentIndex;\\n        require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n        require(quantity != 0, \\\"ERC721A: quantity must be greater than 0\\\");\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint128(quantity);\\n            _addressData[to].numberMinted += uint128(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe) {\\n                    require(\\n                        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n                        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                }\\n\\n                updatedIndex++;\\n            }\\n\\n            currentIndex = updatedIndex;\\n        }\\n\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            getApproved(tokenId) == _msgSender() ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n        require(isApprovedOrOwner, \\\"ERC721A: transfer caller is not owner nor approved\\\");\\n\\n        require(prevOwnership.addr == from, \\\"ERC721A: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                if (_exists(nextTokenId)) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5b816eda622d1d069115df354601013b3ed3717acd692c77019d6f260972a9d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600c805461ff00191690556000600f553480156200002157600080fd5b5060405162002fdc38038062002fdc83398101604081905262000044916200032d565b8251839083906200005d906001906020850190620001d4565b50805162000073906002906020840190620001d4565b505050620000906200008a620000a460201b60201c565b620000a8565b6200009b81620000fa565b50505062000409565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007546001600160a01b031633146200015a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001b25760405162461bcd60e51b815260206004820152601860248201527f7a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640162000151565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b828054620001e290620003b6565b90600052602060002090601f01602090048101928262000206576000855562000251565b82601f106200022157805160ff191683800117855562000251565b8280016001018555821562000251579182015b828111156200025157825182559160200191906001019062000234565b506200025f92915062000263565b5090565b5b808211156200025f576000815560010162000264565b600082601f8301126200028b578081fd5b81516001600160401b0380821115620002a857620002a8620003f3565b604051601f8301601f19908116603f01168101908282118183101715620002d357620002d3620003f3565b81604052838152602092508683858801011115620002ef578485fd5b8491505b83821015620003125785820183015181830184015290820190620002f3565b838211156200032357848385830101525b9695505050505050565b60008060006060848603121562000342578283fd5b83516001600160401b038082111562000359578485fd5b62000367878388016200027a565b945060208601519150808211156200037d578384fd5b506200038c868287016200027a565b604086015190935090506001600160a01b0381168114620003ab578182fd5b809150509250925092565b600181811c90821680620003cb57607f821691505b60208210811415620003ed57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612bc380620004196000396000f3fe6080604052600436106102725760003560e01c806369921df31161014f578063a22cb465116100c1578063df3fdf001161007a578063df3fdf001461071f578063e985e9c514610750578063ee55efee14610799578063ef340772146107ae578063f2c4ce1e146107c4578063f2fde38b146107e457600080fd5b8063a22cb46514610676578063a8602fea14610696578063b88d4fde146106b6578063ba41b0c6146106d6578063c2036fc9146106e9578063c87b56dd146106ff57600080fd5b80638401535f116101135780638401535f146105d857806388d15d50146105ed5780638da5cb5b1461060d578063902d55a51461062b57806395d89b4114610641578063a101ff6d1461065657600080fd5b806369921df31461053357806369e10d8c1461055357806370a0823114610583578063715018a6146105a3578063778f3f64146105b857600080fd5b80632f745c59116101e85780634f3abc84116101ac5780634f3abc841461046d5780634f6ccce71461048d57806351830227146104ad57806355f804b3146104cc5780635bf5d54c146104ec5780636352211e1461051357600080fd5b80632f745c59146103ed5780633ccfd60b1461040d5780633d779f321461042257806342842e0e146104385780634b9fe1031461045857600080fd5b8063081812fc1161023a578063081812fc1461032f578063095ea7b3146103675780630c1c972a1461038757806318160ddd1461039c57806323b872dd146103b15780632a234e57146103d157600080fd5b806301ffc9a71461027757806302d81a12146102ac57806304b89891146102d657806304c98b2b146102f857806306fdde031461030d575b600080fd5b34801561028357600080fd5b5061029761029236600461285b565b610804565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102c867016345785d8a000081565b6040519081526020016102a3565b3480156102e257600080fd5b506102f66102f1366004612843565b610871565b005b34801561030457600080fd5b506102f66108a9565b34801561031957600080fd5b506103226108ea565b6040516102a391906129be565b34801561033b57600080fd5b5061034f61034a366004612843565b61097c565b6040516001600160a01b0390911681526020016102a3565b34801561037357600080fd5b506102f6610382366004612790565b610a07565b34801561039357600080fd5b506102f6610b1f565b3480156103a857600080fd5b506000546102c8565b3480156103bd57600080fd5b506102f66103cc3660046126b4565b610b5d565b3480156103dd57600080fd5b506102c867011c37937e08000081565b3480156103f957600080fd5b506102c8610408366004612790565b610b68565b34801561041957600080fd5b506102f6610cc4565b34801561042e57600080fd5b506102c8600a5481565b34801561044457600080fd5b506102f66104533660046126b4565b610d23565b34801561046457600080fd5b506102f6610d3e565b34801561047957600080fd5b506102f6610488366004612843565b610d7b565b34801561049957600080fd5b506102c86104a8366004612843565b610daa565b3480156104b957600080fd5b50600c5461029790610100900460ff1681565b3480156104d857600080fd5b506102f66104e7366004612893565b610e0c565b3480156104f857600080fd5b50600c546105069060ff1681565b6040516102a39190612996565b34801561051f57600080fd5b5061034f61052e366004612843565b610eb3565b34801561053f57600080fd5b506102f661054e366004612843565b610ec5565b34801561055f57600080fd5b5061029761056e366004612843565b60116020526000908152604090205460ff1681565b34801561058f57600080fd5b506102c861059e366004612668565b610ef4565b3480156105af57600080fd5b506102f6610f85565b3480156105c457600080fd5b506102f66105d3366004612843565b610fbb565b3480156105e457600080fd5b506102c8600281565b3480156105f957600080fd5b506102f66106083660046127b9565b611024565b34801561061957600080fd5b506007546001600160a01b031661034f565b34801561063757600080fd5b506102c861271081565b34801561064d57600080fd5b5061032261124a565b34801561066257600080fd5b506102f66106713660046127f8565b611259565b34801561068257600080fd5b506102f6610691366004612767565b61129f565b3480156106a257600080fd5b506102f66106b1366004612668565b611364565b3480156106c257600080fd5b506102f66106d13660046126ef565b611406565b6102f66106e43660046128c5565b61143f565b3480156106f557600080fd5b506102c8600b5481565b34801561070b57600080fd5b5061032261071a366004612843565b6117ee565b34801561072b57600080fd5b5061032260405180604001604052806005815260200164173539b7b760d91b81525081565b34801561075c57600080fd5b5061029761076b366004612682565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156107a557600080fd5b506102f66119fe565b3480156107ba57600080fd5b506102c8600f5481565b3480156107d057600080fd5b506102f66107df366004612893565b611a3c565b3480156107f057600080fd5b506102f66107ff366004612668565b611a79565b60006001600160e01b031982166380ac58cd60e01b148061083557506001600160e01b03198216635b5e139f60e01b145b8061085057506001600160e01b0319821663780e9d6360e01b145b8061086b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6007546001600160a01b031633146108a45760405162461bcd60e51b815260040161089b90612a0a565b60405180910390fd5b600e55565b6007546001600160a01b031633146108d35760405162461bcd60e51b815260040161089b90612a0a565b600c80546002919060ff19166001835b0217905550565b6060600180546108f990612af4565b80601f016020809104026020016040519081016040528092919081815260200182805461092590612af4565b80156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b5050505050905090565b6000610989826000541190565b6109eb5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b606482015260840161089b565b506000908152600560205260409020546001600160a01b031690565b6000610a1282610eb3565b9050806001600160a01b0316836001600160a01b03161415610a815760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b606482015260840161089b565b336001600160a01b0382161480610a9d5750610a9d813361076b565b610b0f5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606482015260840161089b565b610b1a838383611b11565b505050565b6007546001600160a01b03163314610b495760405162461bcd60e51b815260040161089b90612a0a565b600c80546003919060ff19166001836108e3565b610b1a838383611b6d565b6000610b7383610ef4565b8210610bcc5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161089b565b600080549080805b83811015610c64576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b03169183019190915215610c2657805192505b876001600160a01b0316836001600160a01b03161415610c5b5786841415610c545750935061086b92505050565b6001909301925b50600101610bd4565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b606482015260840161089b565b6007546001600160a01b03163314610cee5760405162461bcd60e51b815260040161089b90612a0a565b60105460405147916001600160a01b03169082156108fc029083906000818181858888f19350505050610d2057600080fd5b50565b610b1a83838360405180602001604052806000815250611406565b6007546001600160a01b03163314610d685760405162461bcd60e51b815260040161089b90612a0a565b600c80546001919060ff191682806108e3565b6007546001600160a01b03163314610da55760405162461bcd60e51b815260040161089b90612a0a565b600d55565b600080548210610e085760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b606482015260840161089b565b5090565b6007546001600160a01b03163314610e365760405162461bcd60e51b815260040161089b90612a0a565b600a5481604051602001610e4a91906129be565b6040516020818303038152906040528051906020012014610e9c5760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840d0c2e6d60a31b604482015260640161089b565b8051610eaf9060089060208401906124cf565b5050565b6000610ebe82611e50565b5192915050565b6007546001600160a01b03163314610eef5760405162461bcd60e51b815260040161089b90612a0a565b600f55565b60006001600160a01b038216610f605760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161089b565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6007546001600160a01b03163314610faf5760405162461bcd60e51b815260040161089b90612a0a565b610fb96000611f26565b565b6007546001600160a01b03163314610fe55760405162461bcd60e51b815260040161089b90612a0a565b600a81905542600b556040518181527fce7a7b18d329876448838b610822d7b07101f7d2a447f62c2e05b0939650d61b9060200160405180910390a150565b6000600c5460ff16600381111561104b57634e487b7160e01b600052602160045260246000fd5b14156110885760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b604482015260640161089b565b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061110283838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600e549150849050611f78565b61114e5760405162461bcd60e51b815260206004820152601c60248201527f77616c6c6574206e6f7420696e2066726565206d696e74206c69737400000000604482015260640161089b565b60008181526011602052604090205460ff16156111a35760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e48199c9959481b5a5b9d1959606a1b604482015260640161089b565b6000818152601160205260408120805460ff19166001908117909155600f8054919290916111d2908490612add565b9091555050600f54600054612710916111ea91612a92565b1061122d5760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b604482015260640161089b565b610b1a336001604051806020016040528060008152506000611f8e565b6060600280546108f990612af4565b6007546001600160a01b031633146112835760405162461bcd60e51b815260040161089b90612a0a565b600c805461ff00191661010084151502179055610eaf81610e0c565b6001600160a01b0382163314156112f85760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c6572000000000000604482015260640161089b565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6007546001600160a01b0316331461138e5760405162461bcd60e51b815260040161089b90612a0a565b6001600160a01b0381166113e45760405162461bcd60e51b815260206004820152601860248201527f7a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161089b565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b611411848484611b6d565b61141d84848484612150565b6114395760405162461bcd60e51b815260040161089b90612a3f565b50505050565b6002600c5460ff16600381111561146657634e487b7160e01b600052602160045260246000fd5b148061149657506003600c5460ff16600381111561149457634e487b7160e01b600052602160045260246000fd5b145b6114d15760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b604482015260640161089b565b6000831161151a5760405162461bcd60e51b8152602060048201526016602482015275185b5bdd5b9d081d1bc81b5a5b9d081a5b9d985b1a5960521b604482015260640161089b565b3233146115615760405162461bcd60e51b815260206004820152601560248201527418dbdb9d1c9858dd1cc81b9bdd08185b1b1bddd959605a1b604482015260640161089b565b6002600c5460ff16600381111561158857634e487b7160e01b600052602160045260246000fd5b141561171a5760008361159a3361225e565b6115a49190612a92565b905060028111156115f75760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f74206d696e7420616d6f756e742072657175657374656400000000604482015260640161089b565b3461160a8567011c37937e080000612abe565b111561164d5760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015260640161089b565b6040516bffffffffffffffffffffffff193360601b1660208201526000906034016040516020818303038152906040528051906020012090506116c784848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600d549150849050611f78565b6117135760405162461bcd60e51b815260206004820152601a60248201527f77616c6c6574206e6f7420696e2070726573616c65206c697374000000000000604482015260640161089b565b5050611770565b3461172d8467016345785d8a0000612abe565b11156117705760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015260640161089b565b61271083600f546000546117849190612a92565b61178e9190612a92565b11156117d25760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b604482015260640161089b565b610b1a3384604051806020016040528060008152506000611f8e565b60606117fb826000541190565b61185f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161089b565b600c54610100900460ff16611900576009805461187b90612af4565b80601f01602080910402602001604051908101604052809291908181526020018280546118a790612af4565b80156118f45780601f106118c9576101008083540402835291602001916118f4565b820191906000526020600020905b8154815290600101906020018083116118d757829003601f168201915b50505050509050919050565b60006008805461190f90612af4565b80601f016020809104026020016040519081016040528092919081815260200182805461193b90612af4565b80156119885780601f1061195d57610100808354040283529160200191611988565b820191906000526020600020905b81548152906001019060200180831161196b57829003601f168201915b5050505050905060008151116119ad57604051806020016040528060008152506119f7565b806119b7846122fc565b60405180604001604052806005815260200164173539b7b760d91b8152506040516020016119e7939291906129d1565b6040516020818303038152906040525b9392505050565b6007546001600160a01b03163314611a285760405162461bcd60e51b815260040161089b90612a0a565b600c80546000919060ff19166001836108e3565b6007546001600160a01b03163314611a665760405162461bcd60e51b815260040161089b90612a0a565b8051610eaf9060099060208401906124cf565b6007546001600160a01b03163314611aa35760405162461bcd60e51b815260040161089b90612a0a565b6001600160a01b038116611b085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161089b565b610d2081611f26565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611b7882611e50565b80519091506000906001600160a01b0316336001600160a01b03161480611baf575033611ba48461097c565b6001600160a01b0316145b80611bc157508151611bc1903361076b565b905080611c2b5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161089b565b846001600160a01b031682600001516001600160a01b031614611c9f5760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b606482015260840161089b565b6001600160a01b038416611d035760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161089b565b611d136000848460000151611b11565b6001600160a01b03858116600090815260046020908152604080832080546001600160801b03198082166001600160801b03928316600019018316179092558986168086528386208054938416938316600190810190931693909317909255888552600390935281842080546001600160e01b031916909117600160a01b426001600160401b031602179055908601808352912054909116611e0657611dba816000541190565b15611e0657825160008281526003602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6040805180820190915260008082526020820152611e6f826000541190565b611ece5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b606482015260840161089b565b815b6000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b03169183019190915215611f1c579392505050565b5060001901611ed0565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082611f858584612415565b14949350505050565b6000546001600160a01b038516611ff15760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161089b565b8361204f5760405162461bcd60e51b815260206004820152602860248201527f455243373231413a207175616e74697479206d75737420626520677265617465604482015267072207468616e20360c41b606482015260840161089b565b6001600160a01b03851660008181526004602090815260408083208054600160801b6001600160801b031982166001600160801b039283168c01831690811782900483168c01909216021790558483526003909152812080546001600160e01b031916909217600160a01b426001600160401b0316021790915581905b858110156121475760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4831561213b5761211f6000888488612150565b61213b5760405162461bcd60e51b815260040161089b90612a3f565b600191820191016120cc565b50600055611e49565b60006001600160a01b0384163b1561225257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612194903390899088908890600401612959565b602060405180830381600087803b1580156121ae57600080fd5b505af19250505080156121de575060408051601f3d908101601f191682019092526121db91810190612877565b60015b612238573d80801561220c576040519150601f19603f3d011682016040523d82523d6000602084013e612211565b606091505b5080516122305760405162461bcd60e51b815260040161089b90612a3f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612256565b5060015b949350505050565b60006001600160a01b0382166122d05760405162461bcd60e51b815260206004820152603160248201527f455243373231413a206e756d626572206d696e74656420717565727920666f7260448201527020746865207a65726f206164647265737360781b606482015260840161089b565b506001600160a01b0316600090815260046020526040902054600160801b90046001600160801b031690565b6060816123205750506040805180820190915260018152600360fc1b602082015290565b8160005b811561234a578061233481612b2f565b91506123439050600a83612aaa565b9150612324565b6000816001600160401b0381111561237257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561239c576020820181803683370190505b5090505b8415612256576123b1600183612add565b91506123be600a86612b4a565b6123c9906030612a92565b60f81b8183815181106123ec57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061240e600a86612aaa565b94506123a0565b600081815b84518110156124c757600085828151811061244557634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116124875760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506124b4565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806124bf81612b2f565b91505061241a565b509392505050565b8280546124db90612af4565b90600052602060002090601f0160209004810192826124fd5760008555612543565b82601f1061251657805160ff1916838001178555612543565b82800160010185558215612543579182015b82811115612543578251825591602001919060010190612528565b50610e089291505b80821115610e08576000815560010161254b565b60006001600160401b038084111561257957612579612b8a565b604051601f8501601f19908116603f011681019082821181831017156125a1576125a1612b8a565b816040528093508581528686860111156125ba57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146125eb57600080fd5b919050565b60008083601f840112612601578081fd5b5081356001600160401b03811115612617578182fd5b6020830191508360208260051b850101111561263257600080fd5b9250929050565b803580151581146125eb57600080fd5b600082601f830112612659578081fd5b6119f78383356020850161255f565b600060208284031215612679578081fd5b6119f7826125d4565b60008060408385031215612694578081fd5b61269d836125d4565b91506126ab602084016125d4565b90509250929050565b6000806000606084860312156126c8578081fd5b6126d1846125d4565b92506126df602085016125d4565b9150604084013590509250925092565b60008060008060808587031215612704578081fd5b61270d856125d4565b935061271b602086016125d4565b92506040850135915060608501356001600160401b0381111561273c578182fd5b8501601f8101871361274c578182fd5b61275b8782356020840161255f565b91505092959194509250565b60008060408385031215612779578182fd5b612782836125d4565b91506126ab60208401612639565b600080604083850312156127a2578182fd5b6127ab836125d4565b946020939093013593505050565b600080602083850312156127cb578182fd5b82356001600160401b038111156127e0578283fd5b6127ec858286016125f0565b90969095509350505050565b6000806040838503121561280a578182fd5b61281383612639565b915060208301356001600160401b0381111561282d578182fd5b61283985828601612649565b9150509250929050565b600060208284031215612854578081fd5b5035919050565b60006020828403121561286c578081fd5b81356119f781612ba0565b600060208284031215612888578081fd5b81516119f781612ba0565b6000602082840312156128a4578081fd5b81356001600160401b038111156128b9578182fd5b61225684828501612649565b6000806000604084860312156128d9578081fd5b8335925060208401356001600160401b038111156128f5578182fd5b612901868287016125f0565b9497909650939450505050565b60008151808452815b8181101561293357602081850181015186830182015201612917565b818111156129445782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061298c9083018461290e565b9695505050505050565b60208101600483106129b857634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006119f7602083018461290e565b6060815260006129e4606083018661290e565b82810360208401526129f6818661290e565b9050828103604084015261298c818561290e565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60008219821115612aa557612aa5612b5e565b500190565b600082612ab957612ab9612b74565b500490565b6000816000190483118215151615612ad857612ad8612b5e565b500290565b600082821015612aef57612aef612b5e565b500390565b600181811c90821680612b0857607f821691505b60208210811415612b2957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612b4357612b43612b5e565b5060010190565b600082612b5957612b59612b74565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610d2057600080fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c806369921df31161014f578063a22cb465116100c1578063df3fdf001161007a578063df3fdf001461071f578063e985e9c514610750578063ee55efee14610799578063ef340772146107ae578063f2c4ce1e146107c4578063f2fde38b146107e457600080fd5b8063a22cb46514610676578063a8602fea14610696578063b88d4fde146106b6578063ba41b0c6146106d6578063c2036fc9146106e9578063c87b56dd146106ff57600080fd5b80638401535f116101135780638401535f146105d857806388d15d50146105ed5780638da5cb5b1461060d578063902d55a51461062b57806395d89b4114610641578063a101ff6d1461065657600080fd5b806369921df31461053357806369e10d8c1461055357806370a0823114610583578063715018a6146105a3578063778f3f64146105b857600080fd5b80632f745c59116101e85780634f3abc84116101ac5780634f3abc841461046d5780634f6ccce71461048d57806351830227146104ad57806355f804b3146104cc5780635bf5d54c146104ec5780636352211e1461051357600080fd5b80632f745c59146103ed5780633ccfd60b1461040d5780633d779f321461042257806342842e0e146104385780634b9fe1031461045857600080fd5b8063081812fc1161023a578063081812fc1461032f578063095ea7b3146103675780630c1c972a1461038757806318160ddd1461039c57806323b872dd146103b15780632a234e57146103d157600080fd5b806301ffc9a71461027757806302d81a12146102ac57806304b89891146102d657806304c98b2b146102f857806306fdde031461030d575b600080fd5b34801561028357600080fd5b5061029761029236600461285b565b610804565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102c867016345785d8a000081565b6040519081526020016102a3565b3480156102e257600080fd5b506102f66102f1366004612843565b610871565b005b34801561030457600080fd5b506102f66108a9565b34801561031957600080fd5b506103226108ea565b6040516102a391906129be565b34801561033b57600080fd5b5061034f61034a366004612843565b61097c565b6040516001600160a01b0390911681526020016102a3565b34801561037357600080fd5b506102f6610382366004612790565b610a07565b34801561039357600080fd5b506102f6610b1f565b3480156103a857600080fd5b506000546102c8565b3480156103bd57600080fd5b506102f66103cc3660046126b4565b610b5d565b3480156103dd57600080fd5b506102c867011c37937e08000081565b3480156103f957600080fd5b506102c8610408366004612790565b610b68565b34801561041957600080fd5b506102f6610cc4565b34801561042e57600080fd5b506102c8600a5481565b34801561044457600080fd5b506102f66104533660046126b4565b610d23565b34801561046457600080fd5b506102f6610d3e565b34801561047957600080fd5b506102f6610488366004612843565b610d7b565b34801561049957600080fd5b506102c86104a8366004612843565b610daa565b3480156104b957600080fd5b50600c5461029790610100900460ff1681565b3480156104d857600080fd5b506102f66104e7366004612893565b610e0c565b3480156104f857600080fd5b50600c546105069060ff1681565b6040516102a39190612996565b34801561051f57600080fd5b5061034f61052e366004612843565b610eb3565b34801561053f57600080fd5b506102f661054e366004612843565b610ec5565b34801561055f57600080fd5b5061029761056e366004612843565b60116020526000908152604090205460ff1681565b34801561058f57600080fd5b506102c861059e366004612668565b610ef4565b3480156105af57600080fd5b506102f6610f85565b3480156105c457600080fd5b506102f66105d3366004612843565b610fbb565b3480156105e457600080fd5b506102c8600281565b3480156105f957600080fd5b506102f66106083660046127b9565b611024565b34801561061957600080fd5b506007546001600160a01b031661034f565b34801561063757600080fd5b506102c861271081565b34801561064d57600080fd5b5061032261124a565b34801561066257600080fd5b506102f66106713660046127f8565b611259565b34801561068257600080fd5b506102f6610691366004612767565b61129f565b3480156106a257600080fd5b506102f66106b1366004612668565b611364565b3480156106c257600080fd5b506102f66106d13660046126ef565b611406565b6102f66106e43660046128c5565b61143f565b3480156106f557600080fd5b506102c8600b5481565b34801561070b57600080fd5b5061032261071a366004612843565b6117ee565b34801561072b57600080fd5b5061032260405180604001604052806005815260200164173539b7b760d91b81525081565b34801561075c57600080fd5b5061029761076b366004612682565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156107a557600080fd5b506102f66119fe565b3480156107ba57600080fd5b506102c8600f5481565b3480156107d057600080fd5b506102f66107df366004612893565b611a3c565b3480156107f057600080fd5b506102f66107ff366004612668565b611a79565b60006001600160e01b031982166380ac58cd60e01b148061083557506001600160e01b03198216635b5e139f60e01b145b8061085057506001600160e01b0319821663780e9d6360e01b145b8061086b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6007546001600160a01b031633146108a45760405162461bcd60e51b815260040161089b90612a0a565b60405180910390fd5b600e55565b6007546001600160a01b031633146108d35760405162461bcd60e51b815260040161089b90612a0a565b600c80546002919060ff19166001835b0217905550565b6060600180546108f990612af4565b80601f016020809104026020016040519081016040528092919081815260200182805461092590612af4565b80156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b5050505050905090565b6000610989826000541190565b6109eb5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b606482015260840161089b565b506000908152600560205260409020546001600160a01b031690565b6000610a1282610eb3565b9050806001600160a01b0316836001600160a01b03161415610a815760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b606482015260840161089b565b336001600160a01b0382161480610a9d5750610a9d813361076b565b610b0f5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606482015260840161089b565b610b1a838383611b11565b505050565b6007546001600160a01b03163314610b495760405162461bcd60e51b815260040161089b90612a0a565b600c80546003919060ff19166001836108e3565b610b1a838383611b6d565b6000610b7383610ef4565b8210610bcc5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161089b565b600080549080805b83811015610c64576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b03169183019190915215610c2657805192505b876001600160a01b0316836001600160a01b03161415610c5b5786841415610c545750935061086b92505050565b6001909301925b50600101610bd4565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b606482015260840161089b565b6007546001600160a01b03163314610cee5760405162461bcd60e51b815260040161089b90612a0a565b60105460405147916001600160a01b03169082156108fc029083906000818181858888f19350505050610d2057600080fd5b50565b610b1a83838360405180602001604052806000815250611406565b6007546001600160a01b03163314610d685760405162461bcd60e51b815260040161089b90612a0a565b600c80546001919060ff191682806108e3565b6007546001600160a01b03163314610da55760405162461bcd60e51b815260040161089b90612a0a565b600d55565b600080548210610e085760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b606482015260840161089b565b5090565b6007546001600160a01b03163314610e365760405162461bcd60e51b815260040161089b90612a0a565b600a5481604051602001610e4a91906129be565b6040516020818303038152906040528051906020012014610e9c5760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840d0c2e6d60a31b604482015260640161089b565b8051610eaf9060089060208401906124cf565b5050565b6000610ebe82611e50565b5192915050565b6007546001600160a01b03163314610eef5760405162461bcd60e51b815260040161089b90612a0a565b600f55565b60006001600160a01b038216610f605760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161089b565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6007546001600160a01b03163314610faf5760405162461bcd60e51b815260040161089b90612a0a565b610fb96000611f26565b565b6007546001600160a01b03163314610fe55760405162461bcd60e51b815260040161089b90612a0a565b600a81905542600b556040518181527fce7a7b18d329876448838b610822d7b07101f7d2a447f62c2e05b0939650d61b9060200160405180910390a150565b6000600c5460ff16600381111561104b57634e487b7160e01b600052602160045260246000fd5b14156110885760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b604482015260640161089b565b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061110283838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600e549150849050611f78565b61114e5760405162461bcd60e51b815260206004820152601c60248201527f77616c6c6574206e6f7420696e2066726565206d696e74206c69737400000000604482015260640161089b565b60008181526011602052604090205460ff16156111a35760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e48199c9959481b5a5b9d1959606a1b604482015260640161089b565b6000818152601160205260408120805460ff19166001908117909155600f8054919290916111d2908490612add565b9091555050600f54600054612710916111ea91612a92565b1061122d5760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b604482015260640161089b565b610b1a336001604051806020016040528060008152506000611f8e565b6060600280546108f990612af4565b6007546001600160a01b031633146112835760405162461bcd60e51b815260040161089b90612a0a565b600c805461ff00191661010084151502179055610eaf81610e0c565b6001600160a01b0382163314156112f85760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c6572000000000000604482015260640161089b565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6007546001600160a01b0316331461138e5760405162461bcd60e51b815260040161089b90612a0a565b6001600160a01b0381166113e45760405162461bcd60e51b815260206004820152601860248201527f7a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161089b565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b611411848484611b6d565b61141d84848484612150565b6114395760405162461bcd60e51b815260040161089b90612a3f565b50505050565b6002600c5460ff16600381111561146657634e487b7160e01b600052602160045260246000fd5b148061149657506003600c5460ff16600381111561149457634e487b7160e01b600052602160045260246000fd5b145b6114d15760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b604482015260640161089b565b6000831161151a5760405162461bcd60e51b8152602060048201526016602482015275185b5bdd5b9d081d1bc81b5a5b9d081a5b9d985b1a5960521b604482015260640161089b565b3233146115615760405162461bcd60e51b815260206004820152601560248201527418dbdb9d1c9858dd1cc81b9bdd08185b1b1bddd959605a1b604482015260640161089b565b6002600c5460ff16600381111561158857634e487b7160e01b600052602160045260246000fd5b141561171a5760008361159a3361225e565b6115a49190612a92565b905060028111156115f75760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f74206d696e7420616d6f756e742072657175657374656400000000604482015260640161089b565b3461160a8567011c37937e080000612abe565b111561164d5760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015260640161089b565b6040516bffffffffffffffffffffffff193360601b1660208201526000906034016040516020818303038152906040528051906020012090506116c784848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600d549150849050611f78565b6117135760405162461bcd60e51b815260206004820152601a60248201527f77616c6c6574206e6f7420696e2070726573616c65206c697374000000000000604482015260640161089b565b5050611770565b3461172d8467016345785d8a0000612abe565b11156117705760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015260640161089b565b61271083600f546000546117849190612a92565b61178e9190612a92565b11156117d25760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b604482015260640161089b565b610b1a3384604051806020016040528060008152506000611f8e565b60606117fb826000541190565b61185f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161089b565b600c54610100900460ff16611900576009805461187b90612af4565b80601f01602080910402602001604051908101604052809291908181526020018280546118a790612af4565b80156118f45780601f106118c9576101008083540402835291602001916118f4565b820191906000526020600020905b8154815290600101906020018083116118d757829003601f168201915b50505050509050919050565b60006008805461190f90612af4565b80601f016020809104026020016040519081016040528092919081815260200182805461193b90612af4565b80156119885780601f1061195d57610100808354040283529160200191611988565b820191906000526020600020905b81548152906001019060200180831161196b57829003601f168201915b5050505050905060008151116119ad57604051806020016040528060008152506119f7565b806119b7846122fc565b60405180604001604052806005815260200164173539b7b760d91b8152506040516020016119e7939291906129d1565b6040516020818303038152906040525b9392505050565b6007546001600160a01b03163314611a285760405162461bcd60e51b815260040161089b90612a0a565b600c80546000919060ff19166001836108e3565b6007546001600160a01b03163314611a665760405162461bcd60e51b815260040161089b90612a0a565b8051610eaf9060099060208401906124cf565b6007546001600160a01b03163314611aa35760405162461bcd60e51b815260040161089b90612a0a565b6001600160a01b038116611b085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161089b565b610d2081611f26565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611b7882611e50565b80519091506000906001600160a01b0316336001600160a01b03161480611baf575033611ba48461097c565b6001600160a01b0316145b80611bc157508151611bc1903361076b565b905080611c2b5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161089b565b846001600160a01b031682600001516001600160a01b031614611c9f5760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b606482015260840161089b565b6001600160a01b038416611d035760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161089b565b611d136000848460000151611b11565b6001600160a01b03858116600090815260046020908152604080832080546001600160801b03198082166001600160801b03928316600019018316179092558986168086528386208054938416938316600190810190931693909317909255888552600390935281842080546001600160e01b031916909117600160a01b426001600160401b031602179055908601808352912054909116611e0657611dba816000541190565b15611e0657825160008281526003602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6040805180820190915260008082526020820152611e6f826000541190565b611ece5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b606482015260840161089b565b815b6000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b03169183019190915215611f1c579392505050565b5060001901611ed0565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082611f858584612415565b14949350505050565b6000546001600160a01b038516611ff15760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161089b565b8361204f5760405162461bcd60e51b815260206004820152602860248201527f455243373231413a207175616e74697479206d75737420626520677265617465604482015267072207468616e20360c41b606482015260840161089b565b6001600160a01b03851660008181526004602090815260408083208054600160801b6001600160801b031982166001600160801b039283168c01831690811782900483168c01909216021790558483526003909152812080546001600160e01b031916909217600160a01b426001600160401b0316021790915581905b858110156121475760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4831561213b5761211f6000888488612150565b61213b5760405162461bcd60e51b815260040161089b90612a3f565b600191820191016120cc565b50600055611e49565b60006001600160a01b0384163b1561225257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612194903390899088908890600401612959565b602060405180830381600087803b1580156121ae57600080fd5b505af19250505080156121de575060408051601f3d908101601f191682019092526121db91810190612877565b60015b612238573d80801561220c576040519150601f19603f3d011682016040523d82523d6000602084013e612211565b606091505b5080516122305760405162461bcd60e51b815260040161089b90612a3f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612256565b5060015b949350505050565b60006001600160a01b0382166122d05760405162461bcd60e51b815260206004820152603160248201527f455243373231413a206e756d626572206d696e74656420717565727920666f7260448201527020746865207a65726f206164647265737360781b606482015260840161089b565b506001600160a01b0316600090815260046020526040902054600160801b90046001600160801b031690565b6060816123205750506040805180820190915260018152600360fc1b602082015290565b8160005b811561234a578061233481612b2f565b91506123439050600a83612aaa565b9150612324565b6000816001600160401b0381111561237257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561239c576020820181803683370190505b5090505b8415612256576123b1600183612add565b91506123be600a86612b4a565b6123c9906030612a92565b60f81b8183815181106123ec57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061240e600a86612aaa565b94506123a0565b600081815b84518110156124c757600085828151811061244557634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116124875760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506124b4565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806124bf81612b2f565b91505061241a565b509392505050565b8280546124db90612af4565b90600052602060002090601f0160209004810192826124fd5760008555612543565b82601f1061251657805160ff1916838001178555612543565b82800160010185558215612543579182015b82811115612543578251825591602001919060010190612528565b50610e089291505b80821115610e08576000815560010161254b565b60006001600160401b038084111561257957612579612b8a565b604051601f8501601f19908116603f011681019082821181831017156125a1576125a1612b8a565b816040528093508581528686860111156125ba57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146125eb57600080fd5b919050565b60008083601f840112612601578081fd5b5081356001600160401b03811115612617578182fd5b6020830191508360208260051b850101111561263257600080fd5b9250929050565b803580151581146125eb57600080fd5b600082601f830112612659578081fd5b6119f78383356020850161255f565b600060208284031215612679578081fd5b6119f7826125d4565b60008060408385031215612694578081fd5b61269d836125d4565b91506126ab602084016125d4565b90509250929050565b6000806000606084860312156126c8578081fd5b6126d1846125d4565b92506126df602085016125d4565b9150604084013590509250925092565b60008060008060808587031215612704578081fd5b61270d856125d4565b935061271b602086016125d4565b92506040850135915060608501356001600160401b0381111561273c578182fd5b8501601f8101871361274c578182fd5b61275b8782356020840161255f565b91505092959194509250565b60008060408385031215612779578182fd5b612782836125d4565b91506126ab60208401612639565b600080604083850312156127a2578182fd5b6127ab836125d4565b946020939093013593505050565b600080602083850312156127cb578182fd5b82356001600160401b038111156127e0578283fd5b6127ec858286016125f0565b90969095509350505050565b6000806040838503121561280a578182fd5b61281383612639565b915060208301356001600160401b0381111561282d578182fd5b61283985828601612649565b9150509250929050565b600060208284031215612854578081fd5b5035919050565b60006020828403121561286c578081fd5b81356119f781612ba0565b600060208284031215612888578081fd5b81516119f781612ba0565b6000602082840312156128a4578081fd5b81356001600160401b038111156128b9578182fd5b61225684828501612649565b6000806000604084860312156128d9578081fd5b8335925060208401356001600160401b038111156128f5578182fd5b612901868287016125f0565b9497909650939450505050565b60008151808452815b8181101561293357602081850181015186830182015201612917565b818111156129445782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061298c9083018461290e565b9695505050505050565b60208101600483106129b857634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006119f7602083018461290e565b6060815260006129e4606083018661290e565b82810360208401526129f6818661290e565b9050828103604084015261298c818561290e565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60008219821115612aa557612aa5612b5e565b500190565b600082612ab957612ab9612b74565b500490565b6000816000190483118215151615612ad857612ad8612b5e565b500290565b600082821015612aef57612aef612b5e565b500390565b600181811c90821680612b0857607f821691505b60208210811415612b2957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612b4357612b43612b5e565b5060010190565b600082612b5957612b59612b74565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610d2057600080fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2340,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2342,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2344,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2349,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2333_storage)"
      },
      {
        "astId": 2354,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)2338_storage)"
      },
      {
        "astId": 2358,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2364,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1792,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 1794,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 1799,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "baseURIHash",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 1801,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "baseURIHashUpdateTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1804,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "currentStage",
        "offset": 0,
        "slot": "12",
        "type": "t_enum(Stage)1790"
      },
      {
        "astId": 1819,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "revealed",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1821,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "presaleMerkleRootHash",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 1823,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "freeMintMerkleRootHash",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 1826,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "pendingFreeMint",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1828,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 1832,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "alreadyFreeMinted",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Stage)1790": {
        "encoding": "inplace",
        "label": "enum DigitalHanamiNFT.Stage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2338_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2338_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2333_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2333_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2338_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2335,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2337,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2333_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2330,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2332,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}