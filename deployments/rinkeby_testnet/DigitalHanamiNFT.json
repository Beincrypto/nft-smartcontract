{
  "address": "0xF484148167d2218a88ef585aFcfc21C8301Eb8cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_presaleMintMaxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_presaleMintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_saleMintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        }
      ],
      "name": "UpdateMetadataHash",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_EXTENSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "alreadyFreeMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURIHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURIHashUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStage",
      "outputs": [
        {
          "internalType": "enum DigitalHanamiNFT.Stage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "freeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFreeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMintMaxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newBaseURIHash",
          "type": "bytes32"
        }
      ],
      "name": "setBaseURIHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rootHash",
          "type": "bytes32"
        }
      ],
      "name": "setFreeMintMerkleRootHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pendingFreeMint",
          "type": "uint256"
        }
      ],
      "name": "setPendingFreeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rootHash",
          "type": "bytes32"
        }
      ],
      "name": "setPresaleMerkleRootHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_percentage",
          "type": "uint96"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFreemint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea59fdca5dc93dbb18f4f42e5f241f91f2e0388855067dc96dab58468105fc30",
  "receipt": {
    "to": null,
    "from": "0x4CBc4022fD346ea8B1Eff9E11E9F0D76767B5fb2",
    "contractAddress": "0xF484148167d2218a88ef585aFcfc21C8301Eb8cf",
    "transactionIndex": 5,
    "gasUsed": "2735411",
    "logsBloom": "0x
    "blockHash": "0x39ff5ec99afe006f98136b26d8cfefe00b75e0197ced5e07abafe8add173ad09",
    "transactionHash": "0xea59fdca5dc93dbb18f4f42e5f241f91f2e0388855067dc96dab58468105fc30",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 10697043,
        "transactionHash": "0xea59fdca5dc93dbb18f4f42e5f241f91f2e0388855067dc96dab58468105fc30",
        "address": "0xF484148167d2218a88ef585aFcfc21C8301Eb8cf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cbc4022fd346ea8b1eff9e11e9f0d76767b5fb2"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x39ff5ec99afe006f98136b26d8cfefe00b75e0197ced5e07abafe8add173ad09"
      }
    ],
    "blockNumber": 10697043,
    "cumulativeGasUsed": "3444618",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test Hanami",
    "TDHNM",
    2,
    "8000000000000000",
    "10000000000000000",
    10000
  ],
  "numDeployments": 3,
  "solcInputHash": "604f0a91229e21aa9bd4cf3a70339f8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_presaleMintMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleMintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleMintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"UpdateMetadataHash\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_EXTENSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"alreadyFreeMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURIHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURIHashUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"enum DigitalHanamiNFT.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"freeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFreeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMintMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newBaseURIHash\",\"type\":\"bytes32\"}],\"name\":\"setBaseURIHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"setFreeMintMerkleRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingFreeMint\",\"type\":\"uint256\"}],\"name\":\"setPendingFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"setPresaleMerkleRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_percentage\",\"type\":\"uint96\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFreemint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"closeSale()\":{\"details\":\"Close Sale, can be used in case sale should be halted for any circumstance. This will be used for contract testing mainly.\"},\"freeMint(bytes32[])\":{\"details\":\"Free minting. Addresses on free mint list can mint a token without cost.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(uint256,bytes32[])\":{\"details\":\"NFT minting. While on Presale stage, only addresses on whitelist are allowed to mint.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reveal(bool,string)\":{\"details\":\"Reveal the collection metadata.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Set Base URI for all tokens. The Base URI is checked against the baseURIHash.\"},\"setBaseURIHash(bytes32)\":{\"details\":\"Set Base URI Hash. We set the Base URI Hash on sale start so it can be checked that the metadata had not changed.\"},\"setFreeMintMerkleRootHash(bytes32)\":{\"details\":\"Set Free Mint Merkle Root Hash. The root hash of the merkle tree for verification of the freemint list.\"},\"setNotRevealedURI(string)\":{\"details\":\"Set Not Revealed URI for all tokens, this will be returned while collection not revealed.\"},\"setPendingFreeMint(uint256)\":{\"details\":\"Set Pending Free Mint token amount. The number of tokens that will be reserver for free minting, they will be reserved even if not minted until the end of the sale.\"},\"setPresaleMerkleRootHash(bytes32)\":{\"details\":\"Set Presale Merkle Root Hash. The root hash of the merkle tree for verification of the presale list.\"},\"setRoyalty(address,uint96)\":{\"details\":\"Set the royalty for secondary market sales. The base denominator for percentage is internally set to 10000, so 1.00% should be set as 100.\"},\"startFreemint()\":{\"details\":\"Start Freemint.\"},\"startPresale()\":{\"details\":\"Start Presale, only whitelisted addresses can mint (up to `presaleMintMaxAmount` tokens).\"},\"startPublicSale()\":{\"details\":\"Start Public Sale, all addresses can mint, no limits.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw contract funds.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DigitalHanamiNFT.sol\":\"DigitalHanamiNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xefc3d1b4250b3d598cb6bf7886b4466d8025f24e94ac9047b7074dfad3edba10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DigitalHanamiNFT.sol\":{\"content\":\"// contracts/DigitalHanamiNFT.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\n\\ncontract DigitalHanamiNFT is ERC721A, ERC2981, Ownable {\\n    using Strings for uint256;\\n\\n    enum Stage {\\n        Closed,\\n        Freemint,\\n        Presale,\\n        Sale\\n    }\\n\\n    string private baseURI;\\n    string private notRevealedUri;\\n    string public constant BASE_EXTENSION = \\\".json\\\";\\n    bytes32 public baseURIHash;\\n    uint256 public baseURIHashUpdateTime;\\n\\n    Stage public currentStage;\\n    uint256 public immutable presaleMintMaxAmount;\\n    uint256 public immutable presaleMintPrice;\\n    uint256 public immutable saleMintPrice;\\n    uint256 public immutable maxSupply;\\n\\n    bool public revealed = false;\\n\\n    bytes32 private presaleMerkleRootHash;\\n    bytes32 private freeMintMerkleRootHash;\\n    uint256 public pendingFreeMint = 0;\\n    mapping(bytes32 => bool) public alreadyFreeMinted;\\n\\n    event UpdateMetadataHash(bytes32 newHash);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _presaleMintMaxAmount,\\n        uint256 _presaleMintPrice,\\n        uint256 _saleMintPrice,\\n        uint256 _maxSupply\\n    ) ERC721A(string(_name), string(_symbol)) {\\n        presaleMintMaxAmount = _presaleMintMaxAmount;\\n        presaleMintPrice = _presaleMintPrice;\\n        saleMintPrice = _saleMintPrice;\\n        maxSupply = _maxSupply;\\n    }\\n\\n    /**\\n     * @dev Set Base URI for all tokens.\\n     * The Base URI is checked against the baseURIHash.\\n     */\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        require(keccak256(abi.encode(_newBaseURI)) == baseURIHash, \\\"invalid hash\\\");\\n        baseURI = _newBaseURI;\\n    }\\n\\n    /**\\n     * @dev Set Base URI Hash.\\n     * We set the Base URI Hash on sale start so it can be checked that the metadata had not changed.\\n     */\\n    function setBaseURIHash(bytes32 _newBaseURIHash) public onlyOwner {\\n        baseURIHash = _newBaseURIHash;\\n        // solhint-disable-next-line not-rely-on-time\\n        baseURIHashUpdateTime = block.timestamp;\\n        emit UpdateMetadataHash(_newBaseURIHash);\\n    }\\n\\n    /**\\n     * @dev Set Not Revealed URI for all tokens, this will be returned while collection not revealed.\\n     */\\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\n        notRevealedUri = _notRevealedURI;\\n    }\\n\\n    /**\\n     * @dev Set the royalty for secondary market sales.\\n     * The base denominator for percentage is internally set to 10000, so 1.00% should be set as 100.\\n     */\\n    function setRoyalty(address _receiver, uint96 _percentage) public onlyOwner {\\n        _setDefaultRoyalty(_receiver, _percentage);\\n    }\\n\\n    /**\\n     * @dev Start Freemint.\\n     */\\n    function startFreemint() external onlyOwner {\\n        currentStage = Stage.Freemint;\\n    }\\n\\n    /**\\n     * @dev Start Presale, only whitelisted addresses can mint (up to `presaleMintMaxAmount` tokens).\\n     */\\n    function startPresale() external onlyOwner {\\n        currentStage = Stage.Presale;\\n    }\\n\\n    /**\\n     * @dev Start Public Sale, all addresses can mint, no limits.\\n     */\\n    function startPublicSale() external onlyOwner {\\n        currentStage = Stage.Sale;\\n    }\\n\\n    /**\\n     * @dev Close Sale, can be used in case sale should be halted for any circumstance.\\n     * This will be used for contract testing mainly.\\n     */\\n    function closeSale() external onlyOwner {\\n        currentStage = Stage.Closed;\\n    }\\n\\n    /**\\n     * @dev Set Pending Free Mint token amount.\\n     * The number of tokens that will be reserver for free minting,\\n     * they will be reserved even if not minted until the end of the sale.\\n     */\\n    function setPendingFreeMint(uint256 _pendingFreeMint) external onlyOwner {\\n        pendingFreeMint = _pendingFreeMint;\\n    }\\n\\n    /**\\n     * @dev Set Presale Merkle Root Hash.\\n     * The root hash of the merkle tree for verification of the presale list.\\n     */\\n    function setPresaleMerkleRootHash(bytes32 _rootHash) external onlyOwner {\\n        presaleMerkleRootHash = _rootHash;\\n    }\\n\\n    /**\\n     * @dev Set Free Mint Merkle Root Hash.\\n     * The root hash of the merkle tree for verification of the freemint list.\\n     */\\n    function setFreeMintMerkleRootHash(bytes32 _rootHash) external onlyOwner {\\n        freeMintMerkleRootHash = _rootHash;\\n    }\\n\\n    /**\\n     * @dev Reveal the collection metadata.\\n     */\\n    function reveal(bool _state, string memory _newBaseURI) external onlyOwner {\\n        revealed = _state;\\n        setBaseURI(_newBaseURI);\\n    }\\n\\n    /**\\n     * @dev NFT minting.\\n     * While on Presale stage, only addresses on whitelist are allowed to mint.\\n     */\\n    function mint(uint256 _mintAmount, bytes32[] calldata _merkleProof) external payable {\\n        require(currentStage == Stage.Presale || currentStage == Stage.Sale, \\\"not open yet\\\");\\n        require(_mintAmount > 0, \\\"amount to mint invalid\\\");\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(tx.origin == msg.sender, \\\"contracts not allowed\\\");\\n\\n        if (currentStage == Stage.Presale) {\\n            uint256 newMintsPerAddress = _numberMinted(msg.sender) + _mintAmount;\\n            require(newMintsPerAddress <= presaleMintMaxAmount, \\\"cannot mint amount requested\\\");\\n\\n            require(presaleMintPrice * _mintAmount <= msg.value, \\\"insufficient funds\\\");\\n\\n            bytes32 leafHash = keccak256(abi.encodePacked(msg.sender));\\n            require(MerkleProof.verify(_merkleProof, presaleMerkleRootHash, leafHash), \\\"wallet not in presale list\\\");\\n        } else {\\n            require(saleMintPrice * _mintAmount <= msg.value, \\\"insufficient funds\\\");\\n        }\\n\\n        require(currentIndex + pendingFreeMint + _mintAmount <= maxSupply, \\\"collection sold out\\\");\\n\\n        _mint(msg.sender, _mintAmount, \\\"\\\", false);\\n    }\\n\\n    /**\\n     * @dev Free minting.\\n     * Addresses on free mint list can mint a token without cost.\\n     */\\n    function freeMint(bytes32[] calldata _merkleProof) external {\\n        require(currentStage != Stage.Closed, \\\"not open yet\\\");\\n\\n        bytes32 leafHash = keccak256(abi.encodePacked(msg.sender));\\n        require(MerkleProof.verify(_merkleProof, freeMintMerkleRootHash, leafHash), \\\"wallet not in free mint list\\\");\\n\\n        require(!alreadyFreeMinted[leafHash], \\\"already free minted\\\");\\n        alreadyFreeMinted[leafHash] = true;\\n        pendingFreeMint -= 1;\\n\\n        // Here we check only `<` instead of `<=` because not adding qty (1) to currentIndex\\n        require(currentIndex + pendingFreeMint < maxSupply, \\\"collection sold out\\\");\\n\\n        _mint(msg.sender, 1, \\\"\\\", false);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        // solhint-disable-next-line reason-string\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        if (revealed == false) {\\n            return notRevealedUri;\\n        }\\n\\n        string memory currentBaseURI = baseURI;\\n        return\\n            bytes(currentBaseURI).length > 0\\n                ? string(abi.encode(currentBaseURI, tokenId.toString(), BASE_EXTENSION))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Withdraw contract funds.\\n     */\\n    function withdraw(address _to) public onlyOwner {\\n        require(_to != address(0), \\\"zero address not allowed\\\");\\n        uint256 balance = address(this).balance;\\n        // solhint-disable-next-line reason-string\\n        require(payable(_to).send(balance));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9cd9b029d38706af63c44d7d6a7b0fb8d9e14036e115a90324607a11bdfc9558\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Does not support burning tokens to address(0).\\n *\\n * Assumes that an owner cannot have more than the 2**128 - 1 (max value of uint128) of supply\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n    }\\n\\n    struct AddressData {\\n        uint128 balance;\\n        uint128 numberMinted;\\n    }\\n\\n    uint256 internal currentIndex;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return currentIndex;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n        return index;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n        uint256 numMintedSoFar = totalSupply();\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        require(owner != address(0), \\\"ERC721A: number minted query for the zero address\\\");\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n        unchecked {\\n            for (uint256 curr = tokenId; curr >= 0; curr--) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (ownership.addr != address(0)) {\\n                    return ownership;\\n                }\\n            }\\n        }\\n\\n        revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < currentIndex;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = currentIndex;\\n        require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n        require(quantity != 0, \\\"ERC721A: quantity must be greater than 0\\\");\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint128(quantity);\\n            _addressData[to].numberMinted += uint128(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe) {\\n                    require(\\n                        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n                        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                }\\n\\n                updatedIndex++;\\n            }\\n\\n            currentIndex = updatedIndex;\\n        }\\n\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            getApproved(tokenId) == _msgSender() ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n        require(isApprovedOrOwner, \\\"ERC721A: transfer caller is not owner nor approved\\\");\\n\\n        require(prevOwnership.addr == from, \\\"ERC721A: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                if (_exists(nextTokenId)) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5b816eda622d1d069115df354601013b3ed3717acd692c77019d6f260972a9d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052600e805461ff001916905560006011553480156200002257600080fd5b506040516200328b3803806200328b83398101604081905262000045916200025b565b8551869086906200005e90600190602085019062000102565b5080516200007490600290602084019062000102565b505050620000916200008b620000ac60201b60201c565b620000b0565b60809390935260a09190915260c05260e052506200033a9050565b3390565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200011090620002e7565b90600052602060002090601f0160209004810192826200013457600085556200017f565b82601f106200014f57805160ff19168380011785556200017f565b828001600101855582156200017f579182015b828111156200017f57825182559160200191906001019062000162565b506200018d92915062000191565b5090565b5b808211156200018d576000815560010162000192565b600082601f830112620001b9578081fd5b81516001600160401b0380821115620001d657620001d662000324565b604051601f8301601f19908116603f0116810190828211818310171562000201576200020162000324565b816040528381526020925086838588010111156200021d578485fd5b8491505b8382101562000240578582018301518183018401529082019062000221565b838211156200025157848385830101525b9695505050505050565b60008060008060008060c0878903121562000274578182fd5b86516001600160401b03808211156200028b578384fd5b620002998a838b01620001a8565b97506020890151915080821115620002af578384fd5b50620002be89828a01620001a8565b95505060408701519350606087015192506080870151915060a087015190509295509295509295565b600181811c90821680620002fc57607f821691505b602082108114156200031e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e051612ef462000397600039600081816107bb0152818161134001526118d20152600081816106aa0152611869015260008181610517015261172e01526000818161078701526116b90152612ef46000f3fe60806040526004361061027d5760003560e01c806369e10d8c1161014f578063b88d4fde116100c1578063df3fdf001161007a578063df3fdf00146107dd578063e985e9c51461080e578063ee55efee14610857578063ef3407721461086c578063f2c4ce1e14610882578063f2fde38b146108a257600080fd5b8063b88d4fde1461070c578063ba41b0c61461072c578063c2036fc91461073f578063c87b56dd14610755578063cc10adc414610775578063d5abeb01146107a957600080fd5b80638da5cb5b116101135780638da5cb5b146106455780638f2fc60b1461066357806395d89b41146106835780639be9c50d14610698578063a101ff6d146106cc578063a22cb465146106ec57600080fd5b806369e10d8c146105a057806370a08231146105d0578063715018a6146105f0578063778f3f641461060557806388d15d501461062557600080fd5b80633d779f32116101f357806351cff8d9116101ac57806351cff8d9146104c557806355f804b3146104e55780635be50521146105055780635bf5d54c146105395780636352211e1461056057806369921df31461058057600080fd5b80633d779f321461041b57806342842e0e146104315780634b9fe103146104515780634f3abc84146104665780634f6ccce71461048657806351830227146104a657600080fd5b8063095ea7b311610245578063095ea7b3146103485780630c1c972a1461036857806318160ddd1461037d57806323b872dd1461039c5780632a55205a146103bc5780632f745c59146103fb57600080fd5b806301ffc9a71461028257806304b89891146102b757806304c98b2b146102d957806306fdde03146102ee578063081812fc14610310575b600080fd5b34801561028e57600080fd5b506102a261029d366004612b6b565b6108c2565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102d76102d2366004612b53565b6108d3565b005b3480156102e557600080fd5b506102d761090b565b3480156102fa57600080fd5b5061030361094c565b6040516102ae9190612cef565b34801561031c57600080fd5b5061033061032b366004612b53565b6109de565b6040516001600160a01b0390911681526020016102ae565b34801561035457600080fd5b506102d7610363366004612a5f565b610a69565b34801561037457600080fd5b506102d7610b81565b34801561038957600080fd5b506000545b6040519081526020016102ae565b3480156103a857600080fd5b506102d76103b7366004612983565b610bbf565b3480156103c857600080fd5b506103dc6103d7366004612c1e565b610bca565b604080516001600160a01b0390931683526020830191909152016102ae565b34801561040757600080fd5b5061038e610416366004612a5f565b610c78565b34801561042757600080fd5b5061038e600c5481565b34801561043d57600080fd5b506102d761044c366004612983565b610dd4565b34801561045d57600080fd5b506102d7610def565b34801561047257600080fd5b506102d7610481366004612b53565b610e2c565b34801561049257600080fd5b5061038e6104a1366004612b53565b610e5b565b3480156104b257600080fd5b50600e546102a290610100900460ff1681565b3480156104d157600080fd5b506102d76104e0366004612937565b610ebd565b3480156104f157600080fd5b506102d7610500366004612ba3565b610f71565b34801561051157600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054557600080fd5b50600e546105539060ff1681565b6040516102ae9190612cc7565b34801561056c57600080fd5b5061033061057b366004612b53565b611014565b34801561058c57600080fd5b506102d761059b366004612b53565b611026565b3480156105ac57600080fd5b506102a26105bb366004612b53565b60126020526000908152604090205460ff1681565b3480156105dc57600080fd5b5061038e6105eb366004612937565b611055565b3480156105fc57600080fd5b506102d76110e6565b34801561061157600080fd5b506102d7610620366004612b53565b61111c565b34801561063157600080fd5b506102d7610640366004612ac9565b611185565b34801561065157600080fd5b506009546001600160a01b0316610330565b34801561066f57600080fd5b506102d761067e366004612a88565b6113c9565b34801561068f57600080fd5b506103036113fd565b3480156106a457600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d857600080fd5b506102d76106e7366004612b08565b61140c565b3480156106f857600080fd5b506102d7610707366004612a36565b611452565b34801561071857600080fd5b506102d76107273660046129be565b611517565b6102d761073a366004612bd5565b611550565b34801561074b57600080fd5b5061038e600d5481565b34801561076157600080fd5b50610303610770366004612b53565b61196c565b34801561078157600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b557600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e957600080fd5b5061030360405180604001604052806005815260200164173539b7b760d91b81525081565b34801561081a57600080fd5b506102a2610829366004612951565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b34801561086357600080fd5b506102d7611b7c565b34801561087857600080fd5b5061038e60115481565b34801561088e57600080fd5b506102d761089d366004612ba3565b611bba565b3480156108ae57600080fd5b506102d76108bd366004612937565b611bf7565b60006108cd82611c92565b92915050565b6009546001600160a01b031633146109065760405162461bcd60e51b81526004016108fd90612d3b565b60405180910390fd5b601055565b6009546001600160a01b031633146109355760405162461bcd60e51b81526004016108fd90612d3b565b600e80546002919060ff19166001835b0217905550565b60606001805461095b90612e25565b80601f016020809104026020016040519081016040528092919081815260200182805461098790612e25565b80156109d45780601f106109a9576101008083540402835291602001916109d4565b820191906000526020600020905b8154815290600101906020018083116109b757829003601f168201915b5050505050905090565b60006109eb826000541190565b610a4d5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084016108fd565b506000908152600560205260409020546001600160a01b031690565b6000610a7482611014565b9050806001600160a01b0316836001600160a01b03161415610ae35760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016108fd565b336001600160a01b0382161480610aff5750610aff8133610829565b610b715760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016108fd565b610b7c838383611cb7565b505050565b6009546001600160a01b03163314610bab5760405162461bcd60e51b81526004016108fd90612d3b565b600e80546003919060ff1916600183610945565b610b7c838383611d13565b60008281526008602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610c3f5750604080518082019091526007546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610c5e906001600160601b031687612def565b610c689190612ddb565b91519350909150505b9250929050565b6000610c8383611055565b8210610cdc5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016108fd565b600080549080805b83811015610d74576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b03169183019190915215610d3657805192505b876001600160a01b0316836001600160a01b03161415610d6b5786841415610d64575093506108cd92505050565b6001909301925b50600101610ce4565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b60648201526084016108fd565b610b7c83838360405180602001604052806000815250611517565b6009546001600160a01b03163314610e195760405162461bcd60e51b81526004016108fd90612d3b565b600e80546001919060ff19168280610945565b6009546001600160a01b03163314610e565760405162461bcd60e51b81526004016108fd90612d3b565b600f55565b600080548210610eb95760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b60648201526084016108fd565b5090565b6009546001600160a01b03163314610ee75760405162461bcd60e51b81526004016108fd90612d3b565b6001600160a01b038116610f3d5760405162461bcd60e51b815260206004820152601860248201527f7a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016108fd565b60405147906001600160a01b0383169082156108fc029083906000818181858888f19350505050610f6d57600080fd5b5050565b6009546001600160a01b03163314610f9b5760405162461bcd60e51b81526004016108fd90612d3b565b600c5481604051602001610faf9190612cef565b60405160208183030381529060405280519060200120146110015760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840d0c2e6d60a31b60448201526064016108fd565b8051610f6d90600a9060208401906127a5565b600061101f82611ff6565b5192915050565b6009546001600160a01b031633146110505760405162461bcd60e51b81526004016108fd90612d3b565b601155565b60006001600160a01b0382166110c15760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016108fd565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6009546001600160a01b031633146111105760405162461bcd60e51b81526004016108fd90612d3b565b61111a60006120cc565b565b6009546001600160a01b031633146111465760405162461bcd60e51b81526004016108fd90612d3b565b600c81905542600d556040518181527fce7a7b18d329876448838b610822d7b07101f7d2a447f62c2e05b0939650d61b9060200160405180910390a150565b6000600e5460ff1660038111156111ac57634e487b7160e01b600052602160045260246000fd5b14156111e95760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b60448201526064016108fd565b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061126383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601054915084905061211e565b6112af5760405162461bcd60e51b815260206004820152601c60248201527f77616c6c6574206e6f7420696e2066726565206d696e74206c6973740000000060448201526064016108fd565b60008181526012602052604090205460ff16156113045760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e48199c9959481b5a5b9d1959606a1b60448201526064016108fd565b6000818152601260205260408120805460ff191660019081179091556011805491929091611333908490612e0e565b90915550506011546000547f00000000000000000000000000000000000000000000000000000000000000009161136991612dc3565b106113ac5760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b60448201526064016108fd565b610b7c336001604051806020016040528060008152506000612134565b6009546001600160a01b031633146113f35760405162461bcd60e51b81526004016108fd90612d3b565b610f6d82826122f6565b60606002805461095b90612e25565b6009546001600160a01b031633146114365760405162461bcd60e51b81526004016108fd90612d3b565b600e805461ff00191661010084151502179055610f6d81610f71565b6001600160a01b0382163314156114ab5760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016108fd565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611522848484611d13565b61152e848484846123f3565b61154a5760405162461bcd60e51b81526004016108fd90612d70565b50505050565b6002600e5460ff16600381111561157757634e487b7160e01b600052602160045260246000fd5b14806115a757506003600e5460ff1660038111156115a557634e487b7160e01b600052602160045260246000fd5b145b6115e25760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b60448201526064016108fd565b6000831161162b5760405162461bcd60e51b8152602060048201526016602482015275185b5bdd5b9d081d1bc81b5a5b9d081a5b9d985b1a5960521b60448201526064016108fd565b3233146116725760405162461bcd60e51b815260206004820152601560248201527418dbdb9d1c9858dd1cc81b9bdd08185b1b1bddd959605a1b60448201526064016108fd565b6002600e5460ff16600381111561169957634e487b7160e01b600052602160045260246000fd5b1415611862576000836116ab33612501565b6116b59190612dc3565b90507f00000000000000000000000000000000000000000000000000000000000000008111156117275760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f74206d696e7420616d6f756e74207265717565737465640000000060448201526064016108fd565b34611752857f0000000000000000000000000000000000000000000000000000000000000000612def565b11156117955760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064016108fd565b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061180f84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600f54915084905061211e565b61185b5760405162461bcd60e51b815260206004820152601a60248201527f77616c6c6574206e6f7420696e2070726573616c65206c69737400000000000060448201526064016108fd565b50506118d0565b3461188d847f0000000000000000000000000000000000000000000000000000000000000000612def565b11156118d05760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064016108fd565b7f0000000000000000000000000000000000000000000000000000000000000000836011546000546119029190612dc3565b61190c9190612dc3565b11156119505760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b60448201526064016108fd565b610b7c3384604051806020016040528060008152506000612134565b6060611979826000541190565b6119dd5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108fd565b600e54610100900460ff16611a7e57600b80546119f990612e25565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2590612e25565b8015611a725780601f10611a4757610100808354040283529160200191611a72565b820191906000526020600020905b815481529060010190602001808311611a5557829003601f168201915b50505050509050919050565b6000600a8054611a8d90612e25565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab990612e25565b8015611b065780601f10611adb57610100808354040283529160200191611b06565b820191906000526020600020905b815481529060010190602001808311611ae957829003601f168201915b505050505090506000815111611b2b5760405180602001604052806000815250611b75565b80611b358461259f565b60405180604001604052806005815260200164173539b7b760d91b815250604051602001611b6593929190612d02565b6040516020818303038152906040525b9392505050565b6009546001600160a01b03163314611ba65760405162461bcd60e51b81526004016108fd90612d3b565b600e80546000919060ff1916600183610945565b6009546001600160a01b03163314611be45760405162461bcd60e51b81526004016108fd90612d3b565b8051610f6d90600b9060208401906127a5565b6009546001600160a01b03163314611c215760405162461bcd60e51b81526004016108fd90612d3b565b6001600160a01b038116611c865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108fd565b611c8f816120cc565b50565b60006001600160e01b0319821663152a902d60e11b14806108cd57506108cd826126b8565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611d1e82611ff6565b80519091506000906001600160a01b0316336001600160a01b03161480611d55575033611d4a846109de565b6001600160a01b0316145b80611d6757508151611d679033610829565b905080611dd15760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016108fd565b846001600160a01b031682600001516001600160a01b031614611e455760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016108fd565b6001600160a01b038416611ea95760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016108fd565b611eb96000848460000151611cb7565b6001600160a01b03858116600090815260046020908152604080832080546001600160801b03198082166001600160801b03928316600019018316179092558986168086528386208054938416938316600190810190931693909317909255888552600390935281842080546001600160e01b031916909117600160a01b426001600160401b031602179055908601808352912054909116611fac57611f60816000541190565b15611fac57825160008281526003602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6040805180820190915260008082526020820152612015826000541190565b6120745760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016108fd565b815b6000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b031691830191909152156120c2579392505050565b5060001901612076565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261212b8584612723565b14949350505050565b6000546001600160a01b0385166121975760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016108fd565b836121f55760405162461bcd60e51b815260206004820152602860248201527f455243373231413a207175616e74697479206d75737420626520677265617465604482015267072207468616e20360c41b60648201526084016108fd565b6001600160a01b03851660008181526004602090815260408083208054600160801b6001600160801b031982166001600160801b039283168c01831690811782900483168c01909216021790558483526003909152812080546001600160e01b031916909217600160a01b426001600160401b0316021790915581905b858110156122ed5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483156122e1576122c560008884886123f3565b6122e15760405162461bcd60e51b81526004016108fd90612d70565b60019182019101612272565b50600055611fef565b6127106001600160601b03821611156123645760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016108fd565b6001600160a01b0382166123ba5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016108fd565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600755565b60006001600160a01b0384163b156124f557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612437903390899088908890600401612c8a565b602060405180830381600087803b15801561245157600080fd5b505af1925050508015612481575060408051601f3d908101601f1916820190925261247e91810190612b87565b60015b6124db573d8080156124af576040519150601f19603f3d011682016040523d82523d6000602084013e6124b4565b606091505b5080516124d35760405162461bcd60e51b81526004016108fd90612d70565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506124f9565b5060015b949350505050565b60006001600160a01b0382166125735760405162461bcd60e51b815260206004820152603160248201527f455243373231413a206e756d626572206d696e74656420717565727920666f7260448201527020746865207a65726f206164647265737360781b60648201526084016108fd565b506001600160a01b0316600090815260046020526040902054600160801b90046001600160801b031690565b6060816125c35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156125ed57806125d781612e60565b91506125e69050600a83612ddb565b91506125c7565b6000816001600160401b0381111561261557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561263f576020820181803683370190505b5090505b84156124f957612654600183612e0e565b9150612661600a86612e7b565b61266c906030612dc3565b60f81b81838151811061268f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506126b1600a86612ddb565b9450612643565b60006001600160e01b031982166380ac58cd60e01b14806126e957506001600160e01b03198216635b5e139f60e01b145b8061270457506001600160e01b0319821663780e9d6360e01b145b806108cd57506301ffc9a760e01b6001600160e01b03198316146108cd565b600081815b845181101561279d57600085828151811061275357634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311612779576000838152602082905260409020925061278a565b600081815260208490526040902092505b508061279581612e60565b915050612728565b509392505050565b8280546127b190612e25565b90600052602060002090601f0160209004810192826127d35760008555612819565b82601f106127ec57805160ff1916838001178555612819565b82800160010185558215612819579182015b828111156128195782518255916020019190600101906127fe565b50610eb99291505b80821115610eb95760008155600101612821565b60006001600160401b038084111561284f5761284f612ebb565b604051601f8501601f19908116603f0116810190828211818310171561287757612877612ebb565b8160405280935085815286868601111561289057600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146128c157600080fd5b919050565b60008083601f8401126128d7578081fd5b5081356001600160401b038111156128ed578182fd5b6020830191508360208260051b8501011115610c7157600080fd5b803580151581146128c157600080fd5b600082601f830112612928578081fd5b611b7583833560208501612835565b600060208284031215612948578081fd5b611b75826128aa565b60008060408385031215612963578081fd5b61296c836128aa565b915061297a602084016128aa565b90509250929050565b600080600060608486031215612997578081fd5b6129a0846128aa565b92506129ae602085016128aa565b9150604084013590509250925092565b600080600080608085870312156129d3578081fd5b6129dc856128aa565b93506129ea602086016128aa565b92506040850135915060608501356001600160401b03811115612a0b578182fd5b8501601f81018713612a1b578182fd5b612a2a87823560208401612835565b91505092959194509250565b60008060408385031215612a48578182fd5b612a51836128aa565b915061297a60208401612908565b60008060408385031215612a71578182fd5b612a7a836128aa565b946020939093013593505050565b60008060408385031215612a9a578182fd5b612aa3836128aa565b915060208301356001600160601b0381168114612abe578182fd5b809150509250929050565b60008060208385031215612adb578182fd5b82356001600160401b03811115612af0578283fd5b612afc858286016128c6565b90969095509350505050565b60008060408385031215612b1a578182fd5b612b2383612908565b915060208301356001600160401b03811115612b3d578182fd5b612b4985828601612918565b9150509250929050565b600060208284031215612b64578081fd5b5035919050565b600060208284031215612b7c578081fd5b8135611b7581612ed1565b600060208284031215612b98578081fd5b8151611b7581612ed1565b600060208284031215612bb4578081fd5b81356001600160401b03811115612bc9578182fd5b6124f984828501612918565b600080600060408486031215612be9578081fd5b8335925060208401356001600160401b03811115612c05578182fd5b612c11868287016128c6565b9497909650939450505050565b60008060408385031215612c30578182fd5b50508035926020909101359150565b60008151808452815b81811015612c6457602081850181015186830182015201612c48565b81811115612c755782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612cbd90830184612c3f565b9695505050505050565b6020810160048310612ce957634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000611b756020830184612c3f565b606081526000612d156060830186612c3f565b8281036020840152612d278186612c3f565b90508281036040840152612cbd8185612c3f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60008219821115612dd657612dd6612e8f565b500190565b600082612dea57612dea612ea5565b500490565b6000816000190483118215151615612e0957612e09612e8f565b500290565b600082821015612e2057612e20612e8f565b500390565b600181811c90821680612e3957607f821691505b60208210811415612e5a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e7457612e74612e8f565b5060010190565b600082612e8a57612e8a612ea5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611c8f57600080fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x60806040526004361061027d5760003560e01c806369e10d8c1161014f578063b88d4fde116100c1578063df3fdf001161007a578063df3fdf00146107dd578063e985e9c51461080e578063ee55efee14610857578063ef3407721461086c578063f2c4ce1e14610882578063f2fde38b146108a257600080fd5b8063b88d4fde1461070c578063ba41b0c61461072c578063c2036fc91461073f578063c87b56dd14610755578063cc10adc414610775578063d5abeb01146107a957600080fd5b80638da5cb5b116101135780638da5cb5b146106455780638f2fc60b1461066357806395d89b41146106835780639be9c50d14610698578063a101ff6d146106cc578063a22cb465146106ec57600080fd5b806369e10d8c146105a057806370a08231146105d0578063715018a6146105f0578063778f3f641461060557806388d15d501461062557600080fd5b80633d779f32116101f357806351cff8d9116101ac57806351cff8d9146104c557806355f804b3146104e55780635be50521146105055780635bf5d54c146105395780636352211e1461056057806369921df31461058057600080fd5b80633d779f321461041b57806342842e0e146104315780634b9fe103146104515780634f3abc84146104665780634f6ccce71461048657806351830227146104a657600080fd5b8063095ea7b311610245578063095ea7b3146103485780630c1c972a1461036857806318160ddd1461037d57806323b872dd1461039c5780632a55205a146103bc5780632f745c59146103fb57600080fd5b806301ffc9a71461028257806304b89891146102b757806304c98b2b146102d957806306fdde03146102ee578063081812fc14610310575b600080fd5b34801561028e57600080fd5b506102a261029d366004612b6b565b6108c2565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102d76102d2366004612b53565b6108d3565b005b3480156102e557600080fd5b506102d761090b565b3480156102fa57600080fd5b5061030361094c565b6040516102ae9190612cef565b34801561031c57600080fd5b5061033061032b366004612b53565b6109de565b6040516001600160a01b0390911681526020016102ae565b34801561035457600080fd5b506102d7610363366004612a5f565b610a69565b34801561037457600080fd5b506102d7610b81565b34801561038957600080fd5b506000545b6040519081526020016102ae565b3480156103a857600080fd5b506102d76103b7366004612983565b610bbf565b3480156103c857600080fd5b506103dc6103d7366004612c1e565b610bca565b604080516001600160a01b0390931683526020830191909152016102ae565b34801561040757600080fd5b5061038e610416366004612a5f565b610c78565b34801561042757600080fd5b5061038e600c5481565b34801561043d57600080fd5b506102d761044c366004612983565b610dd4565b34801561045d57600080fd5b506102d7610def565b34801561047257600080fd5b506102d7610481366004612b53565b610e2c565b34801561049257600080fd5b5061038e6104a1366004612b53565b610e5b565b3480156104b257600080fd5b50600e546102a290610100900460ff1681565b3480156104d157600080fd5b506102d76104e0366004612937565b610ebd565b3480156104f157600080fd5b506102d7610500366004612ba3565b610f71565b34801561051157600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054557600080fd5b50600e546105539060ff1681565b6040516102ae9190612cc7565b34801561056c57600080fd5b5061033061057b366004612b53565b611014565b34801561058c57600080fd5b506102d761059b366004612b53565b611026565b3480156105ac57600080fd5b506102a26105bb366004612b53565b60126020526000908152604090205460ff1681565b3480156105dc57600080fd5b5061038e6105eb366004612937565b611055565b3480156105fc57600080fd5b506102d76110e6565b34801561061157600080fd5b506102d7610620366004612b53565b61111c565b34801561063157600080fd5b506102d7610640366004612ac9565b611185565b34801561065157600080fd5b506009546001600160a01b0316610330565b34801561066f57600080fd5b506102d761067e366004612a88565b6113c9565b34801561068f57600080fd5b506103036113fd565b3480156106a457600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d857600080fd5b506102d76106e7366004612b08565b61140c565b3480156106f857600080fd5b506102d7610707366004612a36565b611452565b34801561071857600080fd5b506102d76107273660046129be565b611517565b6102d761073a366004612bd5565b611550565b34801561074b57600080fd5b5061038e600d5481565b34801561076157600080fd5b50610303610770366004612b53565b61196c565b34801561078157600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b557600080fd5b5061038e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e957600080fd5b5061030360405180604001604052806005815260200164173539b7b760d91b81525081565b34801561081a57600080fd5b506102a2610829366004612951565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b34801561086357600080fd5b506102d7611b7c565b34801561087857600080fd5b5061038e60115481565b34801561088e57600080fd5b506102d761089d366004612ba3565b611bba565b3480156108ae57600080fd5b506102d76108bd366004612937565b611bf7565b60006108cd82611c92565b92915050565b6009546001600160a01b031633146109065760405162461bcd60e51b81526004016108fd90612d3b565b60405180910390fd5b601055565b6009546001600160a01b031633146109355760405162461bcd60e51b81526004016108fd90612d3b565b600e80546002919060ff19166001835b0217905550565b60606001805461095b90612e25565b80601f016020809104026020016040519081016040528092919081815260200182805461098790612e25565b80156109d45780601f106109a9576101008083540402835291602001916109d4565b820191906000526020600020905b8154815290600101906020018083116109b757829003601f168201915b5050505050905090565b60006109eb826000541190565b610a4d5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084016108fd565b506000908152600560205260409020546001600160a01b031690565b6000610a7482611014565b9050806001600160a01b0316836001600160a01b03161415610ae35760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016108fd565b336001600160a01b0382161480610aff5750610aff8133610829565b610b715760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016108fd565b610b7c838383611cb7565b505050565b6009546001600160a01b03163314610bab5760405162461bcd60e51b81526004016108fd90612d3b565b600e80546003919060ff1916600183610945565b610b7c838383611d13565b60008281526008602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610c3f5750604080518082019091526007546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610c5e906001600160601b031687612def565b610c689190612ddb565b91519350909150505b9250929050565b6000610c8383611055565b8210610cdc5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016108fd565b600080549080805b83811015610d74576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b03169183019190915215610d3657805192505b876001600160a01b0316836001600160a01b03161415610d6b5786841415610d64575093506108cd92505050565b6001909301925b50600101610ce4565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b60648201526084016108fd565b610b7c83838360405180602001604052806000815250611517565b6009546001600160a01b03163314610e195760405162461bcd60e51b81526004016108fd90612d3b565b600e80546001919060ff19168280610945565b6009546001600160a01b03163314610e565760405162461bcd60e51b81526004016108fd90612d3b565b600f55565b600080548210610eb95760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b60648201526084016108fd565b5090565b6009546001600160a01b03163314610ee75760405162461bcd60e51b81526004016108fd90612d3b565b6001600160a01b038116610f3d5760405162461bcd60e51b815260206004820152601860248201527f7a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016108fd565b60405147906001600160a01b0383169082156108fc029083906000818181858888f19350505050610f6d57600080fd5b5050565b6009546001600160a01b03163314610f9b5760405162461bcd60e51b81526004016108fd90612d3b565b600c5481604051602001610faf9190612cef565b60405160208183030381529060405280519060200120146110015760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840d0c2e6d60a31b60448201526064016108fd565b8051610f6d90600a9060208401906127a5565b600061101f82611ff6565b5192915050565b6009546001600160a01b031633146110505760405162461bcd60e51b81526004016108fd90612d3b565b601155565b60006001600160a01b0382166110c15760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016108fd565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6009546001600160a01b031633146111105760405162461bcd60e51b81526004016108fd90612d3b565b61111a60006120cc565b565b6009546001600160a01b031633146111465760405162461bcd60e51b81526004016108fd90612d3b565b600c81905542600d556040518181527fce7a7b18d329876448838b610822d7b07101f7d2a447f62c2e05b0939650d61b9060200160405180910390a150565b6000600e5460ff1660038111156111ac57634e487b7160e01b600052602160045260246000fd5b14156111e95760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b60448201526064016108fd565b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061126383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601054915084905061211e565b6112af5760405162461bcd60e51b815260206004820152601c60248201527f77616c6c6574206e6f7420696e2066726565206d696e74206c6973740000000060448201526064016108fd565b60008181526012602052604090205460ff16156113045760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e48199c9959481b5a5b9d1959606a1b60448201526064016108fd565b6000818152601260205260408120805460ff191660019081179091556011805491929091611333908490612e0e565b90915550506011546000547f00000000000000000000000000000000000000000000000000000000000000009161136991612dc3565b106113ac5760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b60448201526064016108fd565b610b7c336001604051806020016040528060008152506000612134565b6009546001600160a01b031633146113f35760405162461bcd60e51b81526004016108fd90612d3b565b610f6d82826122f6565b60606002805461095b90612e25565b6009546001600160a01b031633146114365760405162461bcd60e51b81526004016108fd90612d3b565b600e805461ff00191661010084151502179055610f6d81610f71565b6001600160a01b0382163314156114ab5760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016108fd565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611522848484611d13565b61152e848484846123f3565b61154a5760405162461bcd60e51b81526004016108fd90612d70565b50505050565b6002600e5460ff16600381111561157757634e487b7160e01b600052602160045260246000fd5b14806115a757506003600e5460ff1660038111156115a557634e487b7160e01b600052602160045260246000fd5b145b6115e25760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081bdc195b881e595d60a21b60448201526064016108fd565b6000831161162b5760405162461bcd60e51b8152602060048201526016602482015275185b5bdd5b9d081d1bc81b5a5b9d081a5b9d985b1a5960521b60448201526064016108fd565b3233146116725760405162461bcd60e51b815260206004820152601560248201527418dbdb9d1c9858dd1cc81b9bdd08185b1b1bddd959605a1b60448201526064016108fd565b6002600e5460ff16600381111561169957634e487b7160e01b600052602160045260246000fd5b1415611862576000836116ab33612501565b6116b59190612dc3565b90507f00000000000000000000000000000000000000000000000000000000000000008111156117275760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f74206d696e7420616d6f756e74207265717565737465640000000060448201526064016108fd565b34611752857f0000000000000000000000000000000000000000000000000000000000000000612def565b11156117955760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064016108fd565b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061180f84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600f54915084905061211e565b61185b5760405162461bcd60e51b815260206004820152601a60248201527f77616c6c6574206e6f7420696e2070726573616c65206c69737400000000000060448201526064016108fd565b50506118d0565b3461188d847f0000000000000000000000000000000000000000000000000000000000000000612def565b11156118d05760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064016108fd565b7f0000000000000000000000000000000000000000000000000000000000000000836011546000546119029190612dc3565b61190c9190612dc3565b11156119505760405162461bcd60e51b815260206004820152601360248201527218dbdb1b1958dd1a5bdb881cdbdb19081bdd5d606a1b60448201526064016108fd565b610b7c3384604051806020016040528060008152506000612134565b6060611979826000541190565b6119dd5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108fd565b600e54610100900460ff16611a7e57600b80546119f990612e25565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2590612e25565b8015611a725780601f10611a4757610100808354040283529160200191611a72565b820191906000526020600020905b815481529060010190602001808311611a5557829003601f168201915b50505050509050919050565b6000600a8054611a8d90612e25565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab990612e25565b8015611b065780601f10611adb57610100808354040283529160200191611b06565b820191906000526020600020905b815481529060010190602001808311611ae957829003601f168201915b505050505090506000815111611b2b5760405180602001604052806000815250611b75565b80611b358461259f565b60405180604001604052806005815260200164173539b7b760d91b815250604051602001611b6593929190612d02565b6040516020818303038152906040525b9392505050565b6009546001600160a01b03163314611ba65760405162461bcd60e51b81526004016108fd90612d3b565b600e80546000919060ff1916600183610945565b6009546001600160a01b03163314611be45760405162461bcd60e51b81526004016108fd90612d3b565b8051610f6d90600b9060208401906127a5565b6009546001600160a01b03163314611c215760405162461bcd60e51b81526004016108fd90612d3b565b6001600160a01b038116611c865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108fd565b611c8f816120cc565b50565b60006001600160e01b0319821663152a902d60e11b14806108cd57506108cd826126b8565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611d1e82611ff6565b80519091506000906001600160a01b0316336001600160a01b03161480611d55575033611d4a846109de565b6001600160a01b0316145b80611d6757508151611d679033610829565b905080611dd15760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016108fd565b846001600160a01b031682600001516001600160a01b031614611e455760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016108fd565b6001600160a01b038416611ea95760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016108fd565b611eb96000848460000151611cb7565b6001600160a01b03858116600090815260046020908152604080832080546001600160801b03198082166001600160801b03928316600019018316179092558986168086528386208054938416938316600190810190931693909317909255888552600390935281842080546001600160e01b031916909117600160a01b426001600160401b031602179055908601808352912054909116611fac57611f60816000541190565b15611fac57825160008281526003602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6040805180820190915260008082526020820152612015826000541190565b6120745760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016108fd565b815b6000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b031691830191909152156120c2579392505050565b5060001901612076565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261212b8584612723565b14949350505050565b6000546001600160a01b0385166121975760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016108fd565b836121f55760405162461bcd60e51b815260206004820152602860248201527f455243373231413a207175616e74697479206d75737420626520677265617465604482015267072207468616e20360c41b60648201526084016108fd565b6001600160a01b03851660008181526004602090815260408083208054600160801b6001600160801b031982166001600160801b039283168c01831690811782900483168c01909216021790558483526003909152812080546001600160e01b031916909217600160a01b426001600160401b0316021790915581905b858110156122ed5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483156122e1576122c560008884886123f3565b6122e15760405162461bcd60e51b81526004016108fd90612d70565b60019182019101612272565b50600055611fef565b6127106001600160601b03821611156123645760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016108fd565b6001600160a01b0382166123ba5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016108fd565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600755565b60006001600160a01b0384163b156124f557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612437903390899088908890600401612c8a565b602060405180830381600087803b15801561245157600080fd5b505af1925050508015612481575060408051601f3d908101601f1916820190925261247e91810190612b87565b60015b6124db573d8080156124af576040519150601f19603f3d011682016040523d82523d6000602084013e6124b4565b606091505b5080516124d35760405162461bcd60e51b81526004016108fd90612d70565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506124f9565b5060015b949350505050565b60006001600160a01b0382166125735760405162461bcd60e51b815260206004820152603160248201527f455243373231413a206e756d626572206d696e74656420717565727920666f7260448201527020746865207a65726f206164647265737360781b60648201526084016108fd565b506001600160a01b0316600090815260046020526040902054600160801b90046001600160801b031690565b6060816125c35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156125ed57806125d781612e60565b91506125e69050600a83612ddb565b91506125c7565b6000816001600160401b0381111561261557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561263f576020820181803683370190505b5090505b84156124f957612654600183612e0e565b9150612661600a86612e7b565b61266c906030612dc3565b60f81b81838151811061268f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506126b1600a86612ddb565b9450612643565b60006001600160e01b031982166380ac58cd60e01b14806126e957506001600160e01b03198216635b5e139f60e01b145b8061270457506001600160e01b0319821663780e9d6360e01b145b806108cd57506301ffc9a760e01b6001600160e01b03198316146108cd565b600081815b845181101561279d57600085828151811061275357634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311612779576000838152602082905260409020925061278a565b600081815260208490526040902092505b508061279581612e60565b915050612728565b509392505050565b8280546127b190612e25565b90600052602060002090601f0160209004810192826127d35760008555612819565b82601f106127ec57805160ff1916838001178555612819565b82800160010185558215612819579182015b828111156128195782518255916020019190600101906127fe565b50610eb99291505b80821115610eb95760008155600101612821565b60006001600160401b038084111561284f5761284f612ebb565b604051601f8501601f19908116603f0116810190828211818310171561287757612877612ebb565b8160405280935085815286868601111561289057600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146128c157600080fd5b919050565b60008083601f8401126128d7578081fd5b5081356001600160401b038111156128ed578182fd5b6020830191508360208260051b8501011115610c7157600080fd5b803580151581146128c157600080fd5b600082601f830112612928578081fd5b611b7583833560208501612835565b600060208284031215612948578081fd5b611b75826128aa565b60008060408385031215612963578081fd5b61296c836128aa565b915061297a602084016128aa565b90509250929050565b600080600060608486031215612997578081fd5b6129a0846128aa565b92506129ae602085016128aa565b9150604084013590509250925092565b600080600080608085870312156129d3578081fd5b6129dc856128aa565b93506129ea602086016128aa565b92506040850135915060608501356001600160401b03811115612a0b578182fd5b8501601f81018713612a1b578182fd5b612a2a87823560208401612835565b91505092959194509250565b60008060408385031215612a48578182fd5b612a51836128aa565b915061297a60208401612908565b60008060408385031215612a71578182fd5b612a7a836128aa565b946020939093013593505050565b60008060408385031215612a9a578182fd5b612aa3836128aa565b915060208301356001600160601b0381168114612abe578182fd5b809150509250929050565b60008060208385031215612adb578182fd5b82356001600160401b03811115612af0578283fd5b612afc858286016128c6565b90969095509350505050565b60008060408385031215612b1a578182fd5b612b2383612908565b915060208301356001600160401b03811115612b3d578182fd5b612b4985828601612918565b9150509250929050565b600060208284031215612b64578081fd5b5035919050565b600060208284031215612b7c578081fd5b8135611b7581612ed1565b600060208284031215612b98578081fd5b8151611b7581612ed1565b600060208284031215612bb4578081fd5b81356001600160401b03811115612bc9578182fd5b6124f984828501612918565b600080600060408486031215612be9578081fd5b8335925060208401356001600160401b03811115612c05578182fd5b612c11868287016128c6565b9497909650939450505050565b60008060408385031215612c30578182fd5b50508035926020909101359150565b60008151808452815b81811015612c6457602081850181015186830182015201612c48565b81811115612c755782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612cbd90830184612c3f565b9695505050505050565b6020810160048310612ce957634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000611b756020830184612c3f565b606081526000612d156060830186612c3f565b8281036020840152612d278186612c3f565b90508281036040840152612cbd8185612c3f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60008219821115612dd657612dd6612e8f565b500190565b600082612dea57612dea612ea5565b500490565b6000816000190483118215151615612e0957612e09612e8f565b500290565b600082821015612e2057612e20612e8f565b500390565b600181811c90821680612e3957607f821691505b60208210811415612e5a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e7457612e74612e8f565b5060010190565b600082612e8a57612e8a612ea5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611c8f57600080fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "closeSale()": {
        "details": "Close Sale, can be used in case sale should be halted for any circumstance. This will be used for contract testing mainly."
      },
      "freeMint(bytes32[])": {
        "details": "Free minting. Addresses on free mint list can mint a token without cost."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(uint256,bytes32[])": {
        "details": "NFT minting. While on Presale stage, only addresses on whitelist are allowed to mint."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reveal(bool,string)": {
        "details": "Reveal the collection metadata."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Set Base URI for all tokens. The Base URI is checked against the baseURIHash."
      },
      "setBaseURIHash(bytes32)": {
        "details": "Set Base URI Hash. We set the Base URI Hash on sale start so it can be checked that the metadata had not changed."
      },
      "setFreeMintMerkleRootHash(bytes32)": {
        "details": "Set Free Mint Merkle Root Hash. The root hash of the merkle tree for verification of the freemint list."
      },
      "setNotRevealedURI(string)": {
        "details": "Set Not Revealed URI for all tokens, this will be returned while collection not revealed."
      },
      "setPendingFreeMint(uint256)": {
        "details": "Set Pending Free Mint token amount. The number of tokens that will be reserver for free minting, they will be reserved even if not minted until the end of the sale."
      },
      "setPresaleMerkleRootHash(bytes32)": {
        "details": "Set Presale Merkle Root Hash. The root hash of the merkle tree for verification of the presale list."
      },
      "setRoyalty(address,uint96)": {
        "details": "Set the royalty for secondary market sales. The base denominator for percentage is internally set to 10000, so 1.00% should be set as 100."
      },
      "startFreemint()": {
        "details": "Start Freemint."
      },
      "startPresale()": {
        "details": "Start Presale, only whitelisted addresses can mint (up to `presaleMintMaxAmount` tokens)."
      },
      "startPublicSale()": {
        "details": "Start Public Sale, all addresses can mint, no limits."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "details": "Withdraw contract funds."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2648,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2650,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2652,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2657,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2641_storage)"
      },
      {
        "astId": 2662,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)2646_storage)"
      },
      {
        "astId": 2666,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2672,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1198,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(RoyaltyInfo)1195_storage"
      },
      {
        "astId": 1203,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1195_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2050,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2052,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2057,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "baseURIHash",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 2059,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "baseURIHashUpdateTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2062,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "currentStage",
        "offset": 0,
        "slot": "14",
        "type": "t_enum(Stage)2048"
      },
      {
        "astId": 2073,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "revealed",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2075,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "presaleMerkleRootHash",
        "offset": 0,
        "slot": "15",
        "type": "t_bytes32"
      },
      {
        "astId": 2077,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "freeMintMerkleRootHash",
        "offset": 0,
        "slot": "16",
        "type": "t_bytes32"
      },
      {
        "astId": 2080,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "pendingFreeMint",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2084,
        "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
        "label": "alreadyFreeMinted",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Stage)2048": {
        "encoding": "inplace",
        "label": "enum DigitalHanamiNFT.Stage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2646_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2646_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1195_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1195_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2641_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2641_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2646_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2643,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2645,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1195_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1192,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1194,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2641_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2638,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2640,
            "contract": "contracts/DigitalHanamiNFT.sol:DigitalHanamiNFT",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}